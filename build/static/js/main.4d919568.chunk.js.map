{"version":3,"sources":["components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","redux/profile-reducer.js","redux/dialogs-reducer.js","api/api.js","components/Navbar/Navbar.module.css","assets/images/user.png","assets/images/preloader.svg","components/Dialogs/Messages/Message.jsx","components/login/login.jsx","components/common/Preloader/preloader.js","redux/auth-reducer.js","components/Navbar/Navbar.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","components/common/Paginator/Paginator.jsx","components/Users/User.jsx","components/Users/Users.jsx","redux/sidebar-reducer.js","redux/users-reducer.js","redux/users-selectors.js","components/Users/UsersContainer.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","redux/app-reducer.js","App.js","hoc/withSuspense.js","serviceWorker.js","redux/redux-store.js","index.js","components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.js","utils/validator.js","components/Users/Users.module.css","components/Dialogs/Dialogs.module.css"],"names":["module","exports","initialState","posts","id","message","likesCount","profile","status","addPostActionCreator","newMessageBody","type","setUserProfile","setStatus","getUserProfile","userId","dispatch","a","profileAPI","getProfile","response","data","getStatus","updateUserStatus","updateStatus","resultCode","profileReducer","state","action","newPost","newPostText","filter","p","postId","messages","sender","profileImage","dialogs","name","addMessageActionCreator","dialogsReducer","instance","axios","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","unfollow","delete","follow","post","authAPI","auth","login","email","password","rememberMe","logout","put","Message","props","className","cn","s","myMessage","src","maxLength15","maxLengthCreator","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","placeholder","component","Input","validate","required","formStyle","formSummaryError","error","connect","isAuth","to","formData","Preloader","preloader","setAuthUserReducer","payload","getAuthUserData","length","stopSubmit","_error","authReducer","Navbar","console","log","friends","friendsElement","map","f","friendsImage","friendsName","nav","item","activeClassName","activeLink","friendsContainer","News","Music","Settings","Paginator","pagesCount","Math","ceil","totalUsersCount","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pageNumbers","onClick","selectedPage","key","onPageChanged","User","user","photos","small","userPhoto","followed","disabled","followingInProgress","some","Users","users","u","sidebarReducer","isFetching","followSuccess","userID","unFollowSuccess","setCurrentPage","usersPageNumber","toggleIsFetching","toggleFollowingInProgress","folowUnfolowFlow","apiMethod","actionCreator","usersReducer","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","this","React","Component","bind","page","items","totalCount","Header","header","scr","loginBlock","HeaderContainer","initialized","DialogsContainer","lazy","ProfileContainer","LoginPage","App","initializeApp","sideBar","path","render","Suspense","fallback","store","dialogsPage","profilePage","compose","withRouter","app","promise","Promise","all","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","createStore","applyMiddleware","thunkMiddleware","getState","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","Textarea","input","meta","hasError","touched","formControl","value","maxLengthNumber"],"mappings":"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","file":"static/js/main.4d919568.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNumbers\":\"Paginator_pageNumbers__3UQ3a\",\"selectedPage\":\"Paginator_selectedPage__dV8jl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3VSqm\",\"loginBlock\":\"Header_loginBlock__3_1Ll\"};","import {profileAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, World', likesCount: 0},\r\n        {id: 2, message: 'It is my first post!', likesCount: 9}\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n};\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 3,\r\n                message: action.newMessageBody,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                newPostText: '',\r\n                posts: [...state.posts, (newPost)]\r\n            };\r\n        }\r\n\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n\r\n            };\r\n        }\r\n\r\n        case DELETE_POST: {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n        }\r\n\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (newMessageBody) => { /*Это вспомогательная функция, чтобы не ошибиться при создании передаваемого значения обехкта action для dispatch*/\r\n    return {\r\n        type: ADD_POST,\r\n        newMessageBody\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const setUserProfile = (profile) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n\r\n    }\r\n}\r\n\r\nexport const setStatus = (status) => ({type: SET_STATUS, status})\r\nexport const deletePost = (postId) => ({type: DELETE_POST, postId})\r\n\r\n\r\n/*\r\nexport const profileData = (userId) => (dispatch) => {\r\n    profileAPI.getProfileData(userId)\r\n    /!*axios.get(`https://social-network.samuraijs.com/api/1.0/profile/`+ userId)*!/\r\n        .then((data) => {\r\n            dispatch(setUserProfile(data));\r\n        });\r\n}*/\r\n\r\n/*Это старый код, который был заменен на более современный синтаксис с использованием async и await */\r\nexport const getUserProfileBACKUP = (userId) => (dispatch) => {\r\n    /*axios.get(`https://social-network.samuraijs.com/api/1.0/profile/`+ userId)*/\r\n    profileAPI.getProfile(userId).then((response) => {\r\n        dispatch(setUserProfile(response.data));\r\n    });\r\n}\r\n\r\n/*Ниже код с более современным синтексесом для асинхронных запросов*/\r\nexport const getUserProfile = (userId) => async (dispatch) => { //async - сообщает, что далее будет асинхронный запрос\r\n    let response = await profileAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data));\r\n}\r\n\r\nexport const getStatus = (userId) => async (dispatch) => {\r\n    let response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data));\r\n}\r\n\r\nexport const updateUserStatus = (status) => async (dispatch) => {\r\n    let response = await profileAPI.updateStatus(status);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n\r\n}\r\n\r\nexport default profileReducer;","\r\nconst ADD_MESSAGE = 'ADD-MESSAGE';\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Hi', sender: 'Dima', profileImage: 'https://cs13.pikabu.ru/avatars/2729/x2729750-428926448.png' },\r\n        {id: 2, message: 'Hi', sender: 'i', profileImage: 'https://cs4.pikabu.ru/post_img/2015/05/03/9/1430665235_1330163848.jpg' },\r\n        {id: 3, message: 'How are you?', sender: 'Dima', profileImage: 'https://cs13.pikabu.ru/avatars/2729/x2729750-428926448.png' },\r\n        {id: 4, message: 'Where have you been?', sender: 'Dima', profileImage: 'https://cs13.pikabu.ru/avatars/2729/x2729750-428926448.png' },\r\n        {id: 5, message: 'Have bee traveling to London', sender: 'i', profileImage: 'https://cs4.pikabu.ru/post_img/2015/05/03/9/1430665235_1330163848.jpg' },\r\n        {id: 6, message: 'It is great! I hope to see you soon', sender: 'Dima', profileImage: 'https://cs13.pikabu.ru/avatars/2729/x2729750-428926448.png' }\r\n    ],\r\n    dialogs: [\r\n        {id: 1, name: 'Dima', profileImage: 'https://cs13.pikabu.ru/avatars/2729/x2729750-428926448.png'},\r\n        {id: 2, name: 'Kostya', profileImage: 'https://d2hhj3gz5jljkm.cloudfront.net/assets2/118/425/852/672/normal/avatar.jpg'},\r\n        {id: 3, name: 'Masha', profileImage: 'https://cs8.pikabu.ru/avatars/2473/x2473353-331445533.png'},\r\n        {id: 4, name: 'Elena', profileImage: 'https://sun9-66.userapi.com/c845217/v845217725/bf87/nanuNw2dUHk.jpg'}\r\n    ]\r\n\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:{\r\n            let newMessageBody = {\r\n                id: 7,\r\n                message: action.newMessageBody,\r\n                sender: 'i',\r\n                profileImage: 'https://cs4.pikabu.ru/post_img/2015/05/03/9/1430665235_1330163848.jpg'\r\n            };\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, (newMessageBody)] /* Такой синтаксис используется впесто push - stateCopy.messages.push(newMessageBody). Т.е.: ...state.messages делает копию массива сообщений, а часть после запятой - (newMessageBody) - добавляет кщк одно сообщение в массив сообщений. Если нужно добавить сообщение в начало массива, то нужно вставить добавляемое сообщение в начало массива, а за ним через запятую копировать остальную часть */\r\n            };\r\n        }\r\n\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = (newMessageBody) => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        newMessageBody\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default dialogsReducer;","import * as axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({/*метод creat создает отдельный экземпляр axios, к которому мы можем обращаться (вместо глобального axios), указанные ниже свойства этой копии axios будут автоматически включены в мой запрос к серверу*/\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/', /*Эта часть ссылки будет автоматически плюсоваться к вказанному в коде ниже URL (т.е. тому, что я укажу в первом параметре запроса к серверу)*/\r\n    headers: {/*через свойство header можно отправлять различную инфу серверу, в т.ч. свой ключь API, котроый предоставляте серверный разработчик*/\r\n        \"API-KEY\": \"79cb1f0c-0133-4c1b-acbe-fe74f3c6cf30\" /*Это ключ для авторизованных запросов к API. Синтаксис запроса см. в спецификации API сервера*/\r\n    }\r\n\r\n\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) { /*(currentPage = 1, pageSize = 10) - означает, что если параметр не передан, то по дэфолту будет указанное значение*/\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n\r\n    unfollow(userId) {\r\n        return instance.delete(`follow/${userId} `)  /*в delete запросах оповещение того, что я обращаюсь как авторизованный пользователь с моими куками (withCredentials: true) является вторым параметром */\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n\r\n    follow(userId) {\r\n        return instance.post(`follow/${userId} `)  /*в delete запросах оповещение того, что я обращаюсь как авторизованный пользователь с моими куками (withCredentials: true) является вторым параметром */\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    auth() {\r\n        return instance.get(`auth/me`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n\r\n    },\r\n\r\n    login(email, password, rememberMe = false) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe });\r\n    },\r\n\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId) {\r\n        return instance.get(`profile/`+ userId);\r\n\r\n    },\r\n\r\n    getStatus(userId) {\r\n        return instance.get(`profile/status/`+ userId);\r\n\r\n    },\r\n\r\n    updateStatus(status) {\r\n        return instance.put(`profile/status`, { status: status}); /*Согласно документации API для передачи статуса пользователя нам нужно сделать put запрос на end-point .../status/ и передать в него 1 объект, у когорого есть свойство status, внутри котого текст статуса пользователя. В нашем случае мы передаем в API фукнцию текст статуса через параметр и передаем, как значение свойства status  */\r\n    }\r\n\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3mmQ5\",\"item\":\"Navbar_item__1shzi\",\"activeLink\":\"Navbar_activeLink__2IJpG\",\"friendsContainer\":\"Navbar_friendsContainer__2uwdc\",\"friendsElement\":\"Navbar_friendsElement__4V3pX\",\"friendsImage\":\"Navbar_friendsImage__1X_Is\",\"friendsName\":\"Navbar_friendsName__oQFnK\"};","module.exports = __webpack_public_path__ + \"static/media/user.b060e569.png\";","module.exports = __webpack_public_path__ + \"static/media/preloader.27fc27b6.svg\";","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport cn from 'classnames'; /*модуль classname загружается командой npm install classnames --save в Терменале. Ниже этоь модель использутся для присваивания 2-х классов одному элементу. код {[s.myMessage]: props.sender == 'i'} определяет, что присвоить элементу класс s.myMessage если props.sender равен 'i' */\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={cn (s.message, {[s.myMessage]: props.sender == 'i'})}><img src={props.profileImage}/> { props.message }</div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Message;\r\n/*\r\nif (props.sender == 'i') {\r\n    <div className={s.message + ' ' + s.sender}> { props.message }</div>\r\n} else {\r\n    <div className={s.message}> { props.message }</div>\r\n}*/","import React from 'react';\r\nimport { Field } from \"redux-form\";\r\nimport { reduxForm } from 'redux-form';\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validator\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport formStyle from \"../common/FormsControls/FormsControls.module.css\"\r\n\r\nlet maxLength15 = maxLengthCreator(15);\r\n\r\nconst LoginForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}> {/*handleSubmit это функция, предоставляемая плагином redux-form. Мы поручаем ей делать submit нашей формы. Что делает handleSubmit 1) отключает перезагрузку страницы при отправке формы (e.preventDefault) 2) собирает все данные из формочек в объект 3) отправляет данные на сервер  */}\r\n            <div>\r\n                <Field placeholder={\"email\"} name={\"email\"} component={Input} validate={[required]}/> {/*Field - это специальная компонента, предоставляемая плагином redux-form. Тип поля формы задается передачей пропма вот таким форматом component={\"input\"} */}\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} name={\"password\"} component={Input} type={\"password\"} validate={[required, maxLength15]}/>\r\n            </div>\r\n            <div className={formStyle.formSummaryError}>\r\n                { props.error} {/*этот props передается диспатчем stopSubmit в auth-reducer */}\r\n            </div>\r\n            <div>\r\n                <Field component={Input} type={\"checkbox\"} name={\"rememberMe\"} /> remember me\r\n            </div>\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm ({ /* reduxForm - это функция из плагина redux-form, которая создаст контейнерную компоненту для обработки форм.reduxForm()() - имеет 2 вызова. одном указывается только название формы, во вторую передается сама форма в виде параметра */\r\n    //a unique name for the form\r\n    form: 'login' // Здесь указывается уникальное название данной формы, чтобы плаигн мог ее идентифицировать\r\n})(LoginForm)\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n    return <div>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/> {/* Здесь отрисовываем контенерную компоненту, созданную при помощи плагина redux-form*/}\r\n    </div>\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import React from \"react\";\r\nimport s from \"../../Users/Users.module.css\";\r\nimport preloader from \"./../../../assets/images/preloader.svg\"\r\n\r\nlet Preloader = (props) => {\r\n    return (\r\n        <div className={s.preloader}>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Preloader;","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n\r\n\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserReducer = (userId, email, login, isAuth) => (\r\n    {\r\n        type: SET_USER_DATA,\r\n        payload: {userId, email, login, isAuth}\r\n    }\r\n)\r\n\r\n/*Это старый код, который был заменен на более современный синтаксис с использованием async и await */\r\nexport const getAuthUserDataBACKUP = () => {\r\n    return (dispatch) => {\r\n        authAPI.auth().then(data => {\r\n                if (data.resultCode === 0) { /*resultCode === 0 это данные из спецификации к API*/\r\n                    let {id, email, login} = data.data;\r\n                    dispatch(setAuthUserReducer(id, email, login, true)); /*при обработке ответа сервера response.data.data.login  получилась 2 раза data потому, что сервер упаковывкт свой ответ в объект с разделом data, к которому мы обращаемся. При этом BackEnd разрабочик API тоже назвал нужный нам раздел (объект с данными) - data*/\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n\r\n/*Ниже код с более современным синтексесом для асинхронных запросов*/\r\nexport const getAuthUserData = () => {\r\n    return async (dispatch) => { //async - сообщает, что далее будет асинхронный запрос\r\n        let data = await authAPI.auth(); // await - указывает, что нужно дождаться ответа сервера. По оконсанию запроса результат запроса присвоется переменной data и далее мы будем ее использовать как обычную переменную (без метода .then)\r\n\r\n        if (data.resultCode === 0) {/*resultCode === 0 это данные из спецификации к API*/\r\n            let {id, email, login} = data.data;\r\n            dispatch(setAuthUserReducer(id, email, login, true)); /*при обработке ответа сервера response.data.data.login  получилась 2 раза data потому, что сервер упаковывкт свой ответ в объект с разделом data, к которому мы обращаемся. При этом BackEnd разрабочик API тоже назвал нужный нам раздел (объект с данными) - data*/\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n\r\n    if (response.data.resultCode === 0) {/*resultCode === 0 это данные из спецификации к API*/\r\n        dispatch(getAuthUserData()); /*после получения положительного ответа сервера мы запускаем dispatch логинизации в нашем приложение, чтобы пользователю отдавался его профиль и др данные как залогиненного пользователя*/\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some Error\" /*Из специфиувции сервера мы знаем, что если есть ошибка, то сервер вернут массив response.data.messages в ктором будет лежать текст ошибки, поэтому мы проверяем длину этого массива с тестом ошибки, если массив не пустой, то отображаем первую ошибку из массива, если же массив по какой-то причине пустой (но из условия выше мы уже отсекли случай, когда все в порядке), то пишем Some error */\r\n        let action = stopSubmit(\"login\", {_error: message});/*stopSubmit - это функция из библиотеки redux-form, чтобы прекратить передачу данных из формы на сервер. Мы используем это, чтобы получив от сервера ответ, что логин/пароль не совпали с базой данных, то мы прекращаем submit и выдаем ошибку. Мы передаем параметры: первый параметр - login - это название формы, которое мы назначили при создании формы, второй параметр - это поле, в котором показать ошибку и тест ошибки. Можно указать 1 поле, например email / password или общую ошибку указав _error */\r\n        dispatch(action);\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if (response.data.resultCode === 0) {/*resultCode === 0 это данные из спецификации к API*/\r\n        dispatch(setAuthUserReducer(null, null, null, false));/*затираем в нашем state идентификационные данные заменив их на null*/\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport cn from \"classnames\";\r\nimport Message from \"../Dialogs/Messages/Message\";\r\n\r\nconst Navbar = (props) => {\r\n    console.log(props.friends);\r\n        let friendsElement = props.friends.map (f => <div className={s.friendsElement}><div><img src={f.profileImage} className={s.friendsImage}/></div><div className={s.friendsName}>{ f.name }</div></div>  );\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/users' activeClassName={s.activeLink}>Find friends</NavLink>\r\n            </div>\r\n            <div>\r\n                <h3>Friends</h3>\r\n                <div className={s.friendsContainer}>{ friendsElement }</div>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = (props) => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\nconst Music = (props) => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './Settings.module.css'\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React, {useState} from \"react\";\r\nimport s from './Paginator.module.css';\r\n\r\n\r\nlet Paginator = (props,) => {\r\n\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = []\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionSize = 10\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = (portionNumber * portionSize);\r\n\r\n    return (\r\n        <div className={s.pageNumbers}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>\r\n            }\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(p => {\r\n                    return <span className={props.currentPage === p && s.selectedPage} key={p}  onClick={() => {\r\n                        props.onPageChanged(p);\r\n                    }}>{p}</span>\r\n                })}\r\n            { portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>NEXT</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport s from './Users.module.css';\r\nimport userPhoto from '../../assets/images/user.png';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\n\r\n\r\nlet User = (props) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    <NavLink to={'/profile' + `/` + props.user.id}>\r\n                        <img src={props.user.photos.small != null ? props.user.photos.small : userPhoto}\r\n                             className={s.profileImage}/>\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {props.user.followed\r\n\r\n                        ? <button disabled={props.followingInProgress.some(id => id === props.user.id)} onClick={() => {\r\n                            props.unfollow(props.user.id)\r\n                        }}>Unfollow</button>\r\n\r\n                        : <button disabled={props.followingInProgress.some(id => id === props.user.id)} onClick={() => {\r\n                            props.follow(props.user.id)\r\n                        }}>Follow</button>\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <div>{props.user.name}</div>\r\n                    <div>{props.user.status}</div>\r\n                    <div>{\"props.user.city\"}</div>\r\n                    <div>{\"props.user.country\"}</div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\n\r\nexport default User;","import React from \"react\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\n\r\nlet Users = (props) => {\r\n    return (<div>\r\n        <Paginator totalUsersCount={props.totalUsersCount} pageSize={props.pageSize} currentPage={props.currentPage}\r\n                   onPageChanged={props.onPageChanged}/>\r\n        {\r\n            props.users.map(u =>\r\n                <User key={u.id} user={u} followingInProgress={props.followingInProgress} unfollow={props.unfollow}\r\n                      follow={props.follow}/>\r\n            )\r\n        }\r\n    </div>)\r\n}\r\n\r\n\r\nexport default Users;","\r\nlet initialState = {\r\n    friends: [\r\n        {id: 1, name: 'Dima', profileImage: 'https://cs13.pikabu.ru/avatars/2729/x2729750-428926448.png'},\r\n        {id: 2, name: 'Kostya', profileImage: 'https://d2hhj3gz5jljkm.cloudfront.net/assets2/118/425/852/672/normal/avatar.jpg'},\r\n        {id: 3, name: 'Masha', profileImage: 'https://cs8.pikabu.ru/avatars/2473/x2473353-331445533.png'},\r\n        {id: 4, name: 'Elena', profileImage: 'https://sun9-66.userapi.com/c845217/v845217725/bf87/nanuNw2dUHk.jpg'}\r\n    ]\r\n}\r\n\r\n\r\nexport const sidebarReducer = (state = initialState, action) => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import sidebarReducer from \"./sidebar-reducer\";\r\nimport {usersAPI} from \"../api/api\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] /*здесь используется массив, чтобы к этому полю можно было применят ьметод массива filter и some */\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        }\r\n\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.usersPageNumber\r\n            }\r\n        }\r\n\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        }\r\n\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId) /*здесь не нужно оформлять это как массив и делать шлубокую копию, т.к. метод фильтрации сам возвращает новый массив*/\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userID) => {\r\n    return {\r\n        type: FOLLOW, userID\r\n    }\r\n}\r\n\r\nexport const unFollowSuccess = (userID) => {\r\n    return {\r\n        type: UNFOLLOW, userID\r\n    }\r\n}\r\n\r\nexport const setUsers = (users) => {\r\n    return ({\r\n        type: SET_USERS, users\r\n    })\r\n}\r\n\r\nexport const setTotalUsersCount = (totalUsersCount) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT, totalUsersCount\r\n    }\r\n}\r\n\r\n\r\nexport const setPageNumber = (pageNumber) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE, pageNumber /* type: SET_CURRENT_PAGE, usersPageNumber равна записи  type: SET_CURRENT_PAGE, usersPageNumber: usersPageNumber*/\r\n    }\r\n}\r\n\r\nexport const setCurrentPage = (usersPageNumber) => {\r\n    return ({\r\n        type: SET_CURRENT_PAGE, usersPageNumber\r\n    })\r\n}\r\n\r\nexport const toggleIsFetching = (isFetching) => {\r\n    return ({\r\n        type: TOGGLE_IS_FETCHING, isFetching\r\n    })\r\n}\r\n\r\nexport const toggleFollowingInProgress = (isFetching, userId) => {\r\n    return ({\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId  /* параметр isFetching нужен, чтобы при клике пользователя на follow/unfollow в самом начале запущенной функции(запрос к серверу) передавать значение true и по нему делать disable самой кноки (чтобы предотвратить повторное нажатие), а при окончании этой функции (после отработки запроса к серверу) передвать обратно false, чтобы теперь актвировать кнопку опять. isFetching используется в dispatch, чтобы выбрать что отправлять в state */\r\n    })\r\n}\r\n\r\nexport const requestUsers = (page, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\n\r\nexport const folowUnfolowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingInProgress(true, userId));\r\n    let data = await apiMethod(userId);\r\n\r\n    if (data.resultCode == 0) {/*resultCode === 0 это данные из спецификации к API, это означает, что запрос/ответ сервера прошли успешно. У каждого сервера своя маркирвока таким сообщения*/\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingInProgress(false, userId))\r\n\r\n}\r\n\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        let apiMethod = usersAPI.follow.bind(usersAPI); // Эту переменную можно зарефакторить, просто напрямую передав usersAPI.follow(userId) в параметры folowUnfolowFlow См. сжатый синтаксис ниже в unfollow\r\n        let actionCreator = followSuccess; // Эту переменную можно зарефакторить, просто напрямую передав followSuccess в параметры folowUnfolowFlow. См. сжатый синтаксис ниже в unfollow\r\n        folowUnfolowFlow(dispatch, userId, apiMethod, actionCreator)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        folowUnfolowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unFollowSuccess) /*более подробно расписанный синтаксис такой же строчки см. в функции follow выше*/\r\n    }\r\n}\r\n\r\n\r\nexport const followBACKUP = (userId) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingInProgress(true, userId));\r\n\r\n        let data = await usersAPI.follow(userId);\r\n\r\n        if (data.resultCode == 0) {/*resultCode === 0 это данные из спецификации к API, это означает, что запрос/ответ сервера прошли успешно. У каждого сервера своя маркирвока таким сообщения*/\r\n            dispatch(followSuccess(userId))\r\n        }\r\n\r\n        dispatch(toggleFollowingInProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport const unfollowBACKUP = (userId) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingInProgress(true, userId));\r\n        let data = await usersAPI.unfollow(userId);\r\n\r\n        if (data.resultCode == 0) {/*resultCode === 0 это данные из спецификации к API, это означает, что запрос/ответ сервера прошли успешно. У каждого сервера своя маркирвока таким сообщения*/\r\n            dispatch(unFollowSuccess(userId))\r\n        }\r\n\r\n        dispatch(toggleFollowingInProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\n\r\n\r\n","/*селекторы нужны для того, чтобы запрашивать из state какие-то данные. Селекторы позволяют избежать ситуации,\r\nкогда в случае изменения структуры или названия веток в state нужно ходить по всему коду и переписывать.\r\nНужно будт зайти только в селектор и переписать тут. а в остальных местах код менять не нужно */\r\n\r\n/*Простые селекторы лучше создавать вот в ручную, как это сделано ниже, а сложные, где много рассчетов,\r\nнужно создавать с помощью библиотеки reselect (для подключения используй npm install reselect) */\r\n\r\n/*сложные селекторы, созданные библиотекой reselect, имеют внутреннюю проверку нужно ли им запускаться или нет. Поэтому они экономят производительность */\r\n/*сложные селекторы, используют в качестве входных данных данные простых селекторов */\r\n\r\nexport const getUsers = (state) => {\r\n    return state.usersPage.users\r\n}\r\n\r\n/* getUsersSuperSelector ниже это пример реселектора */\r\n/*\r\nexport const getUsersSuperSelector = createSelector = (getUsers, getIsFetching, (users, isFetching) => { //Это сложный селектор созданный библиотекой reselect. Присваеваем переменной создание реселектора, в который первым параметром передаем простой селектор (если сложный селектор зависит от нескольких простых селекторов, то указываем через запятую второй и последующие простые селекторы), а вторым параметром (то что в круглых скобках) будет то, что вернут простые селекторы после их выполнения (т.е. то что вернут простые селекторы, указанные в параметрах до круглых скобок)\r\n    return state.usersPage.users //Тут должно быть сложное вычисление, ради которого мы создаем реселектор\r\n}\r\n*/\r\n\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching= (state) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress= (state) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import React from \"react\";\r\nimport Users from \"./Users\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, unfollow,\r\n    setCurrentPage,\r\n    toggleFollowingInProgress,\r\n    requestUsers\r\n} from \"../../redux/users-reducer\";\r\nimport Preloader from \"../common/Preloader/preloader\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\nclass UsersContainer extends React.Component {\r\n\r\n    componentDidMount() { /*это стандартный метод склассовой компоненты, он отрисовывет HTML в браузере. Если мне нужно что-то дополнительно отобразить или сделать запрос к серверу, то нужно делать это здесь. Мой код сработает после отрисовки страницы. Если мой код изменяет данные для отрисовки, то React еще раз перерисует страницу*/\r\n        const {currentPage, pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize); /*Это thunk функция, т.е. dispatch + axios запрос к серверу обернутые в доп функцию, куда передаем нужные для запроса к серверу данные*/\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        const {pageSize} = this.props;\r\n        this.props.getUsers(pageNumber, pageSize); /*Это thunk функция, т.е. dispatch + axios запрос к серверу обернутые в доп функцию, куда передаем нужные для запроса к серверу данные*/\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   unfollow={this.props.unfollow}\r\n                   follow={this.props.follow}\r\n                   users={this.props.users}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    };\r\n}\r\n\r\n/*let mapStateToProps = (state) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n\r\n    }\r\n}*/\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n\r\n    }\r\n}\r\n\r\n/*Ниже старая запись dispatch, которая по сутиидентична короткой записи, котроую мы сделали в внутри connect. Разница в том, что мы удалили все дублирующтеся части кода и сделали запись с учетом того, что если создать обхект с запись {name: name}, то это идентично записи {name} - обе эти записи React выполняет идентично, но код короче*/\r\n/*let mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        follow: (userID) => {\r\n            dispatch(followAC(userID));\r\n        },\r\n        unFollow: (userID) => {\r\n            dispatch(unFollowAC(userID));\r\n        },\r\n        setUsers: (users) => {\r\n            dispatch(setUsersAC(users));\r\n        },\r\n        setCurrentPage: (usersPageNumber) => {\r\n            dispatch(setPageNumber(usersPageNumber));\r\n        },\r\n        setTotalUsersCount: (totalUsersCount) => {\r\n            dispatch(setTotalUsersCountAC(totalUsersCount));\r\n        },\r\n\r\n        toggleIsFetching: (isFetching) => {\r\n            dispatch(toggleIsFetchingAC(isFetching));\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n}*/\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setCurrentPage,\r\n    toggleFollowingInProgress,\r\n    getUsers: requestUsers\r\n})\r\n(UsersContainer);","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n\r\n    return (\r\n\r\n        <header className={s.header}>\r\n            <img scr='https://www.freeiconspng.com/uploads/customer-support-icon-png-28.png'/>\r\n            <div className={s.loginBlock}>\r\n                { props.isAuth\r\n                    ? <div>{ props.login } - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink to={'/login'}>Login</NavLink> }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {getAuthUserData, logout, setAuthUserReducer} from \"../../redux/auth-reducer\";\r\nimport * as axios from \"axios\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n\r\n    render () {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout} )(HeaderContainer);","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\n\r\nconst INITIALIZING_SUCCESS = 'INITIALIZING_SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZING_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n\r\n\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => (\r\n    {\r\n        type: INITIALIZING_SUCCESS\r\n    }\r\n)\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData()); /*Хотя обычно мы не используем для dispatch его promises (мы их используем для axios запросов на сервер, т.к. это асинхронные функции. Но dispatch тоже возвращает promises, к которым мы сможет обратиться по завершению работы dispatch */\r\n    Promise.all([promise]).then(() => {/*Promise.all([promise]) - такой синтаксис позволяет запустить следующий код по завешению несколькоих асинхронных функций (которые мы указываем в массив(в нашем случае тут всего 1-на функция, но можно добавить и другие))*/\r\n        dispatch(initializedSuccess()); /*после завешения получения инициализацийонных данных с сервера мы dispatch в state инфу, что инициализация завершилась */\r\n    });\r\n}\r\n/*\r\n\r\nexport const login = (email, password, rememberMe) => (dispatch) => {\r\n    authAPI.login(email, password, rememberMe).then(response => {\r\n            if (response.data.resultCode === 0) {/!*resultCode === 0 это данные из спецификации к API*!/\r\n                dispatch(getAuthUserData()); /!*после получения положительного ответа сервера мы запускаем dispatch логинизации в нашем приложение, чтобы пользователю отдавался его профиль и др данные как залогиненного пользователя*!/\r\n            } else {\r\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some Error\" /!*Из специфиувции сервера мы знаем, что если есть ошибка, то сервер вернут массив response.data.messages в ктором будет лежать текст ошибки, поэтому мы проверяем длину этого массива с тестом ошибки, если массив не пустой, то отображаем первую ошибку из массива, если же массив по какой-то причине пустой (но из условия выше мы уже отсекли случай, когда все в порядке), то пишем Some error *!/\r\n                let action = stopSubmit(\"login\", {_error: message});/!*stopSubmit - это функция из библиотеки redux-form, чтобы прекратить передачу данных из формы на сервер. Мы используем это, чтобы получив от сервера ответ, что логин/пароль не совпали с базой данных, то мы прекращаем submit и выдаем ошибку. Мы передаем параметры: первый параметр - login - это название формы, которое мы назначили при создании формы, второй параметр - это поле, в котором показать ошибку и тест ошибки. Можно указать 1 поле, например email / password или общую ошибку указав _error *!/\r\n                dispatch(action);\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n\r\nexport const logout = () => (dispatch) => {\r\n    authAPI.logout().then(response => {\r\n            if (response.data.resultCode === 0) {/!*resultCode === 0 это данные из спецификации к API*!/\r\n                dispatch(setAuthUserReducer(null, null, null, false));/!*затираем в нашем state идентификационные данные заменив их на null*!/\r\n            }\r\n        }\r\n    )\r\n}\r\n*/\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport Navbar from './components/Navbar/Navbar';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\nimport UsersContainer from \"./components/Users/UsersContainer\";\n\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport loginPage from \"./components/login/login\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {withRouter} from \"react-router\";\nimport Preloader from \"./components/common/Preloader/preloader\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport {withSuspense} from \"./hoc/withSuspense\";\n\n/*import LoginPage from \"./components/login/login\";*/\n/*import ProfileContainer from \"./components/Profile/ProfileContainer\";*/\n/*import DialogsContainer from \"./components/Dialogs/DialogsContainer\";*/\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer')); /*Lazy закгрука - эта компонента подгрузится только когда пользователь непейдет на нее, а не в начале инициации всего приложения*/\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer')); /*Lazy закгрука - эта компонента подгрузится только когда пользователь непейдет на нее, а не в начале инициации всего приложения*/\nconst LoginPage = React.lazy(() => import('./components/login/login')); /*Lazy закгрука - эта компонента подгрузится только когда пользователь непейдет на нее, а не в начале инициации всего приложения*/\n\n\n//http://localhost:3000/\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.initializeApp();\n    };\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar friends={this.props.state.sideBar.friends}/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs'\n                           render={() => {\n                               return <React.Suspense fallback={<Preloader/>}>\n                                   <DialogsContainer\n                                       store={this.props.store}\n                                       state={this.props.state.dialogsPage}\n                                   />\n                               </React.Suspense>\n                           }}/> {/*тэг Route позволяет отрисовать указанную в параметре компаненту (component={Dialogs} оно же render={ () => <Dialogs />}) по URL указанному в параметре path ( path='/dialogs') */}\n                    <Route\n                        path='/profile/:userId?' /*синтексис :userId, сообщет роутеру, что тут должен быть какой-то параметр, который мы для нашего понимания кода обозначили как userId. Значек ? означает, что параметр userId является опциональным, его может не быть */\n                        render={() => {\n                            return <React.Suspense fallback={<Preloader/>}>\n                                <ProfileContainer\n                                    state={this.props.state.profilePage}\n                                    dispatch={this.props.dispatch}\n                                    store={this.props.store}\n                                />\n                            </React.Suspense>\n                        }\n                        }/>\n                    <Route path='/users' render={() => <UsersContainer/>}/>\n\n                    <Route path='/news' component={News}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n                    <Route path='/login'\n                           render={withSuspense(LoginPage)}/> {/*withSuspense - это созданный нами hoc-функция, которая содержит в себе весь синтаксис, необходимый для функции Lazy Loading. Можно везде использовать эту функцию вместо React.Suspense */}\n\n\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    initialized: state.app.initialized\n})\n\nexport default compose(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);","import React, {Component} from \"react\";\r\nimport Preloader from \"../components/common/Preloader/preloader\";\r\n\r\nexport const withSuspense = (Component) => {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    };\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sideBar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n\r\n\r\n\r\n});\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware)); /*applyMiddleware(thunkMiddleware) - добавляет промежуточный уровень при обработке dispatch между store и reducer. После вклчюения этого промежуточного слоя перед попадания в reducer задиспатченная функция попадает в Middleware уровень и проверяет, если в полученом коде только action (объект со свойством type, который будет обрабатывать reducer), то код пересывается дальше в reducer, если же там есть thunk функция, то Middleware уровень запустит функцию, получит в результате action и отправить его по томуже пути повторно, теперь Middleware обнаружит, что это чистый action и перешлет его в reducer */\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\n\nlet reRenderEntireTree = (state) => {\n    ReactDOM.render(\n        <BrowserRouter basename={process.env.PUBLIC_URL}> {/*\"Тэг BrowserRouter позволяет отображать разные компоненты-страницы на отдельной странице (URL). По сути код анализирует какой сейчас URL и отрисовывает нужную компоненту, указанную ниже в тэге Route. basename={process.env.PUBLIC_URL} - сообщает реакту, чтобы он брал базовый url domain из окружения, т.к. при запуске с локального сервера будет работать с localhost:3000, при запуске с github будет брать url от туда */}\n            <Provider store={store}> {/*Этот тэг позволяет проводить данные из обезнутой им компоненты в ее дочрние компоненты. Т.е. мы в нее передали store и теперь все дочернии компаненты App имеют доступ к стору через функцию connect. Рекоммендуется передавать данные в Контейнерные обертки Презентационных компонент и дальше передвать в презентационные компаненты через props  */}\n                <App state={state}\n                     dispatch = {store.dispatch.bind(store)}\n                     store={store}\n                     /*addPost={store.addPost.bind(store)}\n                     updateNewPostText={store.updateNewPostText.bind(store)}\n                     updateNewMessageText={store.updateNewMessageText.bind(store)}\n                     addMessage={store.addMessage.bind(store)}*/\n                />\n                {/*<App dialogs={dialogs} messages={messages} posts={posts} />*/}\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('root'));\n};\n\n\nreRenderEntireTree(store.getState());\n\n/*\nstore.subscribe( () => {\n    let state = store.getState();\n    reRenderEntireTree(state);\n});\n*/\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3rbRz\",\"error\":\"FormsControls_error__2loat\",\"formSummaryError\":\"FormsControls_formSummaryError__uYPyj\"};","import React from \"react\";\r\nimport s from \"./FormsControls.module.css\";\r\n\r\nexport const Textarea = ({input, meta, ...props}) => { /*Смотри Rest оператор. По сути мы создаем новый объъект из того объекта, который к нам приходит параметром (props), с помощью копирования его частей: мы полностью копируем свойста input и meta, а всё оставшееся кладем в props*/\r\n/*Т.к. мы использует плагин redux-forms, то авторы продумали, чтобы в props приходили некоторые доп данные в раздел meta. Там есть error, который true если заданная нами валидация сообщила об ошибках. Также там есть touched возвращающий true, если пользователь активировал форму*/\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n        <div>\r\n            <textarea {...input} {...props}/>\r\n        </div>\r\n        {meta.touched && meta.error && <span>Error</span>}\r\n    </div>\r\n)\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}) => { /*Смотри Rest оператор. По сути мы создаем новый объъект из того объекта, который к нам приходит параметром (props), с помощью копирования его частей: мы полностью копируем свойста input и meta, а всё оставшееся кладем в props*/\r\n    /*Т.к. мы использует плагин redux-forms, то авторы продумали, чтобы в props приходили некоторые доп данные в раздел meta. Там есть error, который true если заданная нами валидация сообщила об ошибках. Также там есть touched возвращающий true, если пользователь активировал форму*/\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {meta.touched && meta.error && <span>\"Some error\"</span>}\r\n        </div>\r\n    )\r\n}","export const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLengthNumber) => (value) => {\r\n    if (value.length > maxLengthNumber) return `Max length is ${maxLengthNumber} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userBlock\":\"Users_userBlock__N-ijP\",\"dialogsItems\":\"Users_dialogsItems__3uuIR\",\"dialog\":\"Users_dialog__17FTV\",\"profileImage\":\"Users_profileImage__NeA7M\",\"dialogs\":\"Users_dialogs__3Rw4Z\",\"messageContainer\":\"Users_messageContainer__1QVWW\",\"foo\":\"Users_foo__1v5Ut\",\"pageNumbers\":\"Users_pageNumbers__lH1_D\",\"preloader\":\"Users_preloader__1Q0Cg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2Udwb\",\"dialogsItems\":\"Dialogs_dialogsItems__2WGlv\",\"dialog\":\"Dialogs_dialog__3TqXO\",\"myMessage\":\"Dialogs_myMessage__3zOtz\",\"messages\":\"Dialogs_messages__1i5XD\",\"message\":\"Dialogs_message__DMm_S\",\"messageContainer\":\"Dialogs_messageContainer__1E_MZ\",\"foo\":\"Dialogs_foo__YXAMv\"};"],"sourceRoot":""}