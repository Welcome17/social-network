{"version":3,"sources":["components/Dialogs/DialogItems/DialogItem.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Profile/MyPosts/MyPosts.module.css","components/Profile/Profileinfo/Profileinfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profileinfo/ProfilestatusWithHooks.jsx","components/Profile/Profileinfo/Profileinfo.jsx","components/Profile/MyPosts/AddNewPost.jsx","components/Profile/MyPosts/AddNewPostContainer.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileContainer.jsx"],"names":["DialogItem","props","path","id","className","s","dialog","src","profileImage","to","name","maxLength300","maxLengthCreator","AddMessageFormRedux","reduxForm","form","messageContainer","onSubmit","handleSubmit","component","Textarea","placeholder","validate","required","Dialogs","dialogElements","dialogsPage","dialogs","map","d","messagesElement","messages","m","message","sender","dialogsItems","values","sendMessageClick","newMessageBody","mapStateToPropsTForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","console","log","this","React","connect","module","exports","ProfilestatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateUserStatus","onChange","event","currentTarget","value","ProfileInfo","profile","lookingForAJob","lookingForAJobDescription","ProfileHeader","infoBlock","profilePhoto","photos","large","descriptionBlock","fullName","aboutMe","socialIconsBlock","href","contacts","facebook","twitter","instagram","youtube","github","website","mainLink","NewPostFormRedux","Field","newPostButton","AddNewPost","createRef","postsBlock","addPost","newPostBody","AddNewPostContainer","newPostText","profilePage","dispatch","addPostActionCreator","Post","item","postText","postLikes","likesCount","MyPosts","memo","postsElements","posts","reverse","p","key","MyPostsContainer","ProfileContainer","userId","match","params","authorisedUserId","history","push","getUserProfile","getStatus","store","compose","withRouter"],"mappings":"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","file":"static/js/3.e2bc1c42.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Message from \"../Messages/Message\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <div>\r\n                <img src={props.profileImage} />\r\n            </div>\r\n            <div>\r\n                <NavLink to={path}> { props.name }</NavLink>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItems/DialogItem\";\r\nimport Message from \"./Messages/Message\";\r\n\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validator\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    /*let state = props.dialogsPage;*/\r\n\r\n    let dialogElements = props.dialogsPage.dialogs.map((d) => <DialogItem id={d.id} name={d.name}\r\n                                                                          profileImage={d.profileImage}/>); //метод map - это страндартный метод любого массива. Он перебирает все данные массива и изменяет их по заданному шаблону. Метод map принимает значение стрелочной функции с передаваемым в нее параметром. Передававемым параметром является Элемент изменяемого массива. Т.е., обращаесь в передаваемой переменной ты образается к каждому элементу изменяемого массива. В теле функции прописываем что должны получить в результате для каждого 1-го элемента массива.\r\n    let messagesElement = props.dialogsPage.messages.map(m => <Message id={m.id} message={m.message} sender={m.sender}\r\n                                                                       profileImage={m.profileImage}/>); //метод map - это страндартный метод любого массива. Он перебирает все данные массива и изменяет их по заданному шаблону. Метод map принимает значение стрелочной функции с передаваемым в нее параметром. Передававемым параметром является Элемент изменяемого массива. Т.е., обращаесь в передаваемой переменной ты образается к каждому элементу изменяемого массива. В теле функции прописываем что должны получить в результате для каждого 1-го элемента массива.\r\n\r\n    /*let newMessageElement = React.createRef(); /* Получение данных со строницы. Создаем переменную и присваеваем ей React.createRef(). Приваеваем эту переменную элемену HTML аналогично id='', но следующим синтаксисом ref={newPostElement}. После этого данная переменная будет содержать в себе элемент HTML и можно ображаться к его значению value через синтаксис newPostElement.current.value */\r\n\r\n  /*  let onSendMessageClick = () => {\r\n        /!*let text = newMessageElement.current.value;*!/ /!*Заменил эту строку образением в props.state.newMessageBody, чтобы избежть использование ссылок на элемент через React.createRef() - ef={newMessageElement} *!/\r\n        let text = props.state.newMessageBody;\r\n        if (text == '') {\r\n            alert('Enter the message text, please');\r\n\r\n        } else {\r\n            props.sendMessageClick()\r\n        }\r\n        /!*props.addMessage();*!/\r\n    }*/\r\n\r\n    /*let onMessageChange = (eventObject) => {\r\n        /!*let text = newMessageElement.current.value;*!/ /!*Заменил эту строку образением в event.target.value, чтобы избежть использование ссылок на элемент через React.createRef() - ef={newMessageElement} *!/\r\n        let text = eventObject.target.value; /!* при срабатывании onChange в элементе textarea в вызываемую функцию передается кто вызвал эту функцию в переменную eventObject, поэтому можно обратиться textarea через метод target и взять у нее value*!/\r\n        /!*props.updateNewMessageText(text);*!/\r\n        /!*props.dispatch(updateNewMessageTextActionCreator(text))*!/\r\n        props.updateNewMessageText(text);\r\n    }*/\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessageClick(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElement}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nlet maxLength300 = maxLengthCreator(300);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form className={s.messageContainer} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newMessageBody\"} placeholder={\"enter your message\"} validate={[required, maxLength300]}/>\r\n            </div>\r\n\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm(\r\n    {\r\n    form:\"dialogAddMessageForm\"\r\n    }\r\n\r\n)(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, {Component} from \"react\";\r\nimport {Redirect} from \"react-router\";\r\nimport Dialogs from \"../components/Dialogs/Dialogs\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\n\r\n\r\nlet mapStateToPropsTForRedirect = (state) => ({ /* Если функция является объектом, то нужно после стрелки ставить сперва ( скобку, а потом { */\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            console.log(this.props)\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}/>; /*запись (!this.props.isAuth) равна записи (this.props.isAuth === false) */\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsTForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3jKk_\",\"newPostButton\":\"MyPosts_newPostButton__1rQBh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileHeader\":\"Profileinfo_ProfileHeader__1bAKd\",\"infoBlock\":\"Profileinfo_infoBlock__24kUg\",\"profilePhoto\":\"Profileinfo_profilePhoto__21Jt5\",\"descriptionBlock\":\"Profileinfo_descriptionBlock__3Wo2P\",\"socialIconsBlock\":\"Profileinfo_socialIconsBlock__34nxI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3gJjW\",\"postText\":\"Post_postText__3s6be\",\"postLikes\":\"Post_postLikes__2k55J\"};","import React, {useEffect, useState} from 'react';\r\n\r\n\r\nconst ProfilestatusWithHooks = (props) => {\r\n\r\n    // --- useState(false); --- // useState - это hook, которыйсоздает локальный state (который хранится не в этой еомпоненте, а где-то на стороне react). useState врзващает массв, где первое значение - это то о мы передал параметром при вызове этого хука, а второе значение эо функция, которая устанавливает то первое значение. Если нам нужно изменить значение в этом локальном state, то мы должны использовать способ Destructuring Assigment\r\n    let [editMode, setEditMode] = useState(false); //Этот синтаксис создает переменные, указанные массиве слева, и присваивает им по очереди значения локального state методом Destructuring Assigment, т.е. создадутся переменные editMode и setEditMode и им присвоятся значения, которые вернет useState(true), т.е. в переменную editMode запишем первое значение вернувшегося из useState массива, а setEditMode - привоим второе значение того же массива. В итоге мы получаем данные локального state в отдельных переменных\r\n    let [status, setStatus] = useState(props.status); //Здесь создаем еще 1 локальный state. Так можно создавать бесконечно много локальных state для кажого случая\r\n\r\n    useEffect( () => { //useEffect - это hook, т.к. функция, которая выполнится после отрисовки jsx\r\n        setStatus(props.status); //кладем props.status из глобального state  наш локальный state, чтобы дальше работать с ним.\r\n    /*hook нельзя использовать в условиях (if, switch т др) и в циклах (for, whole и др.)*/\r\n\r\n\r\n    }, [props.status]); // вторым аргументом делаем массив, в котором указываем при изменении чего нужно запускать этот useEffect. В нашем случае если props.status не идентичен props.status который был до этого, то функция запустится. Нам это нужно, чтобы приасинхронном получении данных с сервера компонента поняла, что с сервера уже пришли новые данные и перерисовалась. ВНИМАНИЕ: если оставить массив пустым, то useEffect работает только 1 раз после отрисовки jsx - это плохая практика, лучше понять когда нам реалньо нужна перересовка и от чего это зависит и указать это в массив\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status) // отправляем данные из локального state с наш основной redux state\r\n    }\r\n\r\n    const onStatusChange = (event) => {\r\n        setStatus(event.currentTarget.value); //меняем значение status с помощью setStatus. В качесве значения берем текущее значение поля ввода\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            { !editMode && //Если editMode НЕ true, то покажет этот блок\r\n                <div>\r\n                    <span onDoubleClick={ activateEditMode }>{props.status || \"----\"}</span>\r\n                </div>\r\n            }\r\n            {editMode && //Если editMode true, то покажет этот блок\r\n            <div>\r\n                <input autoFocus={true} onBlur={ deactivateEditMode } onChange={onStatusChange} value={status}/>\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport default ProfilestatusWithHooks;","import React from 'react';\r\nimport s from './Profileinfo.module.css';\r\nimport Preloader from \"../../common/Preloader/preloader\";\r\nimport ProfilestatusWithHooks from \"./ProfilestatusWithHooks\";\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    let lookingForAJob = '';\r\n    if (props.profile.lookingForAJob) {\r\n        lookingForAJob = `Looking for a job: ${props.profile.lookingForAJobDescription}`\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.ProfileHeader}>\r\n                <img src='https://www.zastavki.com/pictures/1920x1200/2009/Nature_Fields_Green_Horizon_015894_.jpg'/>\r\n            </div>\r\n            <div className={s.infoBlock}>\r\n                <img className={s.profilePhoto} src={props.profile.photos.large}/>\r\n                <div className={s.descriptionBlock}>\r\n                    <div>Name: {props.profile.fullName}</div>\r\n                    <div>About me: {props.profile.aboutMe}</div>\r\n                    <div>{lookingForAJob}  </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <ProfilestatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            </div>\r\n\r\n            <div className={s.socialIconsBlock}>\r\n                <a href={`http://${props.profile.contacts.facebook}`}>\r\n                    <img src='https://www.jrmotors.pl/images/fnowe.png'/>\r\n                </a>\r\n                <a href={`http://${props.profile.contacts.twitter}`}>\r\n                    <img\r\n                        src='https://www.freepngimg.com/thumb/business/60486-business-service-twitter-internet-organization-price-thumb.png'/>\r\n                </a>\r\n                <a href={`http://${props.profile.contacts.instagram}`}>\r\n                    <img src='https://shop.dte.la/user_data/images/icon_ig.png'/>\r\n                </a>\r\n                <a href={`http://${props.profile.contacts.youtube}`}>\r\n                    <img src='https://www.itadroid.net/wp-content/uploads/2014/06/unnamed.png'/>\r\n                </a>\r\n                <a href={`http://${props.profile.contacts.github}`}>\r\n                    <img src='https://static.miraheze.org/fortressblastwiki/2/28/Papirus_icon_github.png'/>\r\n                </a>\r\n                <a href={`http://${props.profile.contacts.website}`}>\r\n                    <img src='https://ihlastan.ru/wp-content/uploads/2019/08/99989898.png'/>\r\n                </a>\r\n                <a href={`http://${props.profile.contacts.mainLink}`}>\r\n                    <img src='https://ihlastan.ru/wp-content/uploads/2019/08/99989898.png'/>\r\n                </a>\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from \"./MyPosts.module.css\";\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validator\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\n\r\nconst AddNewPost = (props) => {\r\n\r\n    let newPostElement = React.createRef(); /* Получение данных со строницы. Создаем переменную и присваеваем ей React.createRef(). Приваеваем эту переменную элемену HTML аналогично id='', но следующим синтаксисом ref={newPostElement}. После этого данная переменная будет содержать в себе элемент HTML и можно ображаться к его значению value через синтаксис newPostElement.current.value */\r\n\r\n/*    let onAddsPost = () => {\r\n        let text = props.newPostText;\r\n        if (text == '') {\r\n            alert('Enter the message text, please');\r\n        } else {\r\n            /!*props.dispatch(addPostActionCreator())*!/\r\n            /!*props.dispatch({type: 'ADD-POST'})*!/\r\n            props.addPost();\r\n        }\r\n    };*/\r\n/*    let onPostChange = () => {\r\n        let text = newPostElement.current.value;\r\n        /!*props.dispatch(updateNewPostTextActionCreator(text))*!/\r\n        props.onPostChange(text);\r\n\r\n    };*/\r\n\r\n    let addNewPost = (values) => {\r\n        props.addPost(values.newPostBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <NewPostFormRedux onSubmit={addNewPost}/>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nlet maxLength300 = maxLengthCreator(300);\r\n\r\nconst addNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newPostBody\"} validate={[required, maxLength300]} placeholder={'enter the post text'}/>\r\n                 </div>\r\n\r\n            <div className={s.newPostButton}>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst NewPostFormRedux = reduxForm (\r\n    {\r\n        form: \"ProfileAddNewPostForm\"\r\n    }\r\n)(addNewPostForm)\r\n\r\n\r\n\r\nexport default AddNewPost;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport AddNewPost from \"./AddNewPost\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newMessageBody) => {\r\n            dispatch(addPostActionCreator(newMessageBody));\r\n        },\r\n        /*onPostChange: (text) => {\r\n            let action  = updateNewPostTextActionCreator(text);\r\n            dispatch(action);\r\n        }*/\r\n\r\n    }\r\n}\r\n\r\n\r\nconst AddNewPostContainer = connect(mapStateToProps,mapDispatchToProps)(AddNewPost);\r\n\r\n\r\nexport default AddNewPostContainer;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.profileImage}>\r\n                <img src='https://i04.fotocdn.net/s120/90a06b5661a4730a/gallery_s/2747492836.jpg' />\r\n            </div>\r\n            <div className={s.postText}>\r\n                { props.message }\r\n            </div>\r\n\r\n            <div className={s.postLikes}>\r\n                { props.likesCount } likes\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\n\r\nconst MyPosts = React.memo( (props) => { //React.memo - это High Order Component (HOC), которая проверяет произошли ли какие-то изменения и нужно ли перересовывать компоненту. Задача React.memo - уменишьсь кол-во ненужных перересовок.\r\n\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map ( p => <Post message={p.message} likesCount={p.likesCount} key={p.id}/>); /*метод map - это страндартный метод любого массива. Он перебирает все данные массива и изменяет их по заданному шаблону. Метод map принимает значение стрелочной функции с передаваемым в нее параметром. Передававемым параметром является Элемент изменяемого массива. Т.е., обращаесь в передаваемой переменной ты образается к каждому элементу изменяемого массива. В теле функции прописываем что должны получить в результате для каждого 1-го элемента массива.*/\r\n   // метод reverse переворачивает порядок данных в объекте. Но этот метод изменяет не только выдачу, но и сам объект, т.е. если применить reverse на без предварительного копирования props, то у нас перевернется порядок в state, и при кажой перезагрузке будет опят ьпереворачиватсья в обратную сторону. ЧТобы этого ихбежать нужно делать локальную копию данных и ее изменять. При перезагрузке компонента опять поулчит данные из state, создастся локальная копию в оригиналньом порядке, а reverse перевернет ее\r\n\r\n\r\n    return (\r\n\r\n            <div className={s.posts}>\r\n                { postsElements }\r\n            </div>\r\n\r\n\r\n\r\n    )\r\n})\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {connect} from \"react-redux\";\r\nimport {addMessageActionCreator, updateNewMessageTextActionCreator} from \"../../../redux/dialogs-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nconst MyPostsBackUp = (props) => {\r\n    console.log(props);\r\n\r\n    let postsElements = props.posts.map ( p => <Post message={p.message} likesCount={p.likesCount}/>); /*метод map - это страндартный метод любого массива. Он перебирает все данные массива и изменяет их по заданному шаблону. Метод map принимает значение стрелочной функции с передаваемым в нее параметром. Передававемым параметром является Элемент изменяемого массива. Т.е., обращаесь в передаваемой переменной ты образается к каждому элементу изменяемого массива. В теле функции прописываем что должны получить в результате для каждого 1-го элемента массива.\r\n*/\r\n    return (\r\n\r\n            <div className={s.posts}>\r\n                { postsElements }\r\n            </div>\r\n    )\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from './Profileinfo/Profileinfo';\r\nimport AddNewPostContainer from \"./MyPosts/AddNewPostContainer\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport connect from \"react-redux/es/connect/connect\";\r\nimport {getStatus, getUserProfile, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {Redirect, withRouter} from \"react-router\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorisedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\"); /*в пропсах есть \"ветка\" history, у которой есть функция push(/адрес), запустив который поулчается редирект на указанный адрес*/\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n        /*profileAPI.getProfileData(userId)\r\n        /!*axios.get(`https://social-network.samuraijs.com/api/1.0/profile/`+ userId)*!/\r\n            .then((data) => {\r\n                this.props.setUserProfile(data);\r\n            });*/\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div>\r\n                <ProfileInfo {...this.props}\r\n                             profile={this.props.profile}\r\n                             status={this.props.status}\r\n                             updateUserStatus={this.props.updateUserStatus}/>\r\n                <AddNewPostContainer\r\n                    store={this.props.store}\r\n                />\r\n                <MyPostsContainer posts={this.props.state.posts} store={this.props.store}/>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nlet AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\n\r\n/*   = (props) => {\r\n   if(!props.isAuth) return <Redirect to={\"/login\"} />; /!*запись (!this.props.isAuth) равна записи (this.props.isAuth === false) *!/\r\n\r\n   return <ProfileContainer {...props} />\r\n}*/\r\n\r\n\r\nlet mapStateToProps = (state) => ({ /* Если функция является объектом, то нужно после стрелки ставить сперва ( скобку, а потом { */\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n/*\r\nlet ContainerComponentWithUrlData = withRouter(AuthRedirectComponent); /!*withRouter сканирует URL компоненты и некоторую другую инфу и передает всю эту инфу в виде props компоненте *!/\r\n*/\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateUserStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)\r\n(ProfileContainer);/*compose передаст то что указано здесь как параметр фyнкции из списка выше, начиная с последней(нижей) и двигаясь наверх выполняя функции одну за одной*/"],"sourceRoot":""}